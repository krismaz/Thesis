\FloatBarrier
\section{Algorithms Recap} 

\begin{table}[!h]
\begin{tabular}{|c|c|c|c|}
\hline
Name & Running Time &  Failure Rate & Parallelism \\ \hline
Randomized Shellsort & $O(n \log n)$ & $1/n^b, b \geq 1$ & Some \\
\hline
Annealing Sort & $O(n \log n)$ & $1/n^b, b \geq 1$ & Minor \\
\hline
Bitonic Sort & $O(n \log^2 n)$ & 0 & Highest \\
\hline
Odd-Even Mergesort & $O(n \log^2 n)$ & 0 & High/Highest \\
\hline
Pratt's Shellsort & $O(n \log^2 n)$ & 0 & High \\
\hline
Shaker Sort & $O(n \log n)$ & ? \tablefootnote{Failure rate is dependent on input permutations, and mostly verified experimentally, but low in practice with random input data.} & High\\
\hline
\end{tabular}
\caption{Overview of used algorithms}
\label{AlgTable}
\end{table}

Due to the high number of algorithms present in this thesis, we provide a table listing the different algorithms, and their properties. 

One thing that is painfully obvious from Table~\ref{AlgTable} is the lack of an $O(n \log n)$ algorithm with 0 failure rate. Such algorithms do exist, as explained in the introduction of this thesis, but are both impractical to implement, and have horrible constant factors involved in their running times.

